                    DEVOPs

Antes tinham as áreas separadas em Development, Quality Assurance (QA) e IT Operations.
Isso fazia com que as áreas não se integravam.

O DEVOPs veio para mudar esse conceito e integrar as áreas descritas acima.

Conceito: "DEVOPs é um termo criado para definir o conjunto de práticas que integram 
e automatizam os processos antre as equipes de desenvolvimento, operações e de apoio 
(como QA) para a produção rápida e confiável de software."
 "O conceito do DEVOPs baseia-se em criar uma cultura de colaboração entre as equipes 
que sempre trabalharam separadas. 
DEVOPs é uma mudança de mentalidade, uma cultura, um movimento e uma filosofia."

                    FRAMEWORK CALMS

Feito para mensurar os DEVOPs.
Constitui-se em 

- Culture: Todas feramentas e automações são inúteis s enão forem acompanhadas pela 
verdadeira disposição da área de desenvolvimento e operações em trabalhar juntos. É 
o pilar mais forte, porque o DEVOPs não resolve problemas de ferrramentas, e sim
resolve problemas humanos.

- Automation: Automação elimina o trabalho manual repetitivo, produz processos 
repetíveis e cria sistemas confiáveis. Automatizar gera velocidade na entrega e tornam 
os envolvidos mais produtivos. Normalmente, compilação, teste, implementação e 
provisionamento automatizados são o ponto de partida típico para equipes que ainda 
não tem isso implantado.

- Lean: precisamos focar nas entregas de valor ao cliente. Precisamos ser objetivos e 
enxutos. Precisamos connhecer as nossas limitações e os gargalos do processo. A 
mentalidade DEVOPs vê oportunidade de melhoria contínua em toda parte. Identificando
as limitações, podemos otimizar o fluxo, entregando mais velocidade e maior eficiência.

- Measurement: DEVOPs é cíclico e infinito. Mensurar e obter métricas é o ponto de 
partida para novas melhorias, seja para o processo de desenvolvimento, o software
produzido ou as regras de negócio. Além de gerar conhecimento, as métricas criam 
previsibilidade sobre possíveis incidentes que possam vir a surgir. Assim, temos 
insumos suficientes para analisar falhas e gerar melhorias constantemente.

- Sharing: O compartilhamento de informações, além de ser saudaǘel, auxilia na 
descentralização de conhecimento em pessoas dos times, evitando que os processos se 
tornam dependentes. Compartilhar conhecimento ajuda na criação de times genéricos, 
com conhecimentos básicos em diversos assuntos do negócio e tecnologias. Assim, o 
time se torna autossustentável.

                      OS TRÊS CAMINHOS

FLOW - A otimização do fluxo visa eliminar desperdícios, gargalos no processo, 
transferência de responsabilidades e tempos de espera. Esse caminho é trilhado 
entre a demanda e a entrega em produção. A chave para este caminho é a aplicação
de metodologias ágeis e a automatização dos processos do desenvolvimento à release, 
como a integração contínua e/ou entrega contínua. 

FEEDBACK - Ciclos rápidos de fedback visam resolver problemas o quanto antes, 
testando tudo, alertando em qualquer falha, considerando todas as métricas coletadas 
no ambiente produtivo sobre o valor entregado. O monitoramento é a chave, ajudando a 
gerar informações relevantes constantemente. Com feedbacks rápidos, o negócio consegue 
falhar rápido, e logo retomar o rumo, caso necessário.  

LEARNING - O aprendizado contínuo visa gerar conhecimento através da experimentação.
Hipóteses são melhores do que uma certeza imediata. ESte caminho é fruto do processo
científico e produz segurança psicológica. A chave é o trabalho dinâmico, com times 
realizando experimentos em seu trabalho diário para gerar novas melhorias. Elimine 
a cultura da culpa e aumente a colaboração e o compartilhamento de conhecimento.

                    ENTREGANDO SOFTWARE 

Planejamento - temos MicrosoftTeams; draw.io; Balsamiq; roadmunk; Confluence; Jira.

Codificação(code) - Vscode; Sublieme; Git; GitHub; entre outros.

Build - container; docker; NuGet; npm; cri-o; .NET CLI; MS Build.

Test - Unit.net; Loader.io; Apache Jmeter; Runscope; Postman; sonarqube; code climate;

Release - Azure Pipelines; GitLab CI; Travis CI; Jenkins; circleci; AppVeyor.

Deploy - igual os de cima;

Operate - Kubernetes; Rancher; Microsoft Azure; puppet; Terraform; CHEF; OpenShift, aws;

Monitor - DataDog; Prometheus, Rollbar, Zabbix, New Relic, Pushover, Seq, Monitis.